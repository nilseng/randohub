{"ast":null,"code":"var _jsxFileName = \"/Users/teodordanielsen/randohub/client/src/components/PrivateRoute.js\";\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({\n  component: Component,\n  path,\n  ...rest\n}) => {\n  const {\n    loading,\n    isAuthenticated,\n    loginWithRedirect\n  } = useAuth0();\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: {\n          targetUrl: window.location.pathname\n        }\n      });\n    };\n\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props => isAuthenticated === true ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 32\n    }\n  })) : null;\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({\n    path: path,\n    render: render\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/teodordanielsen/randohub/client/src/components/PrivateRoute.js"],"names":["React","useEffect","Route","useAuth0","PrivateRoute","component","Component","path","rest","loading","isAuthenticated","loginWithRedirect","fn","appState","targetUrl","window","location","pathname","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,IAAxB;AAA8B,KAAGC;AAAjC,CAAD,KAA6C;AAChE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,eAAX;AAA4BC,IAAAA;AAA5B,MAAkDR,QAAQ,EAAhE;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,OAAO,IAAIC,eAAf,EAAgC;AAC9B;AACD;;AACD,UAAME,EAAE,GAAG,YAAY;AACrB,YAAMD,iBAAiB,CAAC;AACtBE,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,SAAS,EAAEC,MAAM,CAACC,QAAP,CAAgBC;AAA7B;AADY,OAAD,CAAvB;AAGD,KAJD;;AAKAL,IAAAA,EAAE;AACH,GAVQ,EAUN,CAACH,OAAD,EAAUC,eAAV,EAA2BC,iBAA3B,EAA8CJ,IAA9C,CAVM,CAAT;;AAYA,QAAMW,MAAM,GAAIC,KAAD,IACbT,eAAe,KAAK,IAApB,gBAA2B,oBAAC,SAAD,oBAAeS,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B,GAAsD,IADxD;;AAGA,sBAAO,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEZ,IAAb;AAAmB,IAAA,MAAM,EAAEW;AAA3B,KAAuCV,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAnBD;;AAqBA,eAAeJ,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: window.location.pathname },\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = (props) =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}